// Code generated by MockGen. DO NOT EDIT.
// Source: users.go
//
// Generated by this command:
//
//	mockgen -source=users.go -destination=mocks_test.go -package=list userGetter,userCacher
//

// Package list is a generated GoMock package.
package list

import (
	context "context"
	reflect "reflect"
	time "time"

	slack "github.com/rusq/slack"
	types "github.com/rusq/slackdump/v3/types"
	gomock "go.uber.org/mock/gomock"
)

// MockuserGetter is a mock of userGetter interface.
type MockuserGetter struct {
	ctrl     *gomock.Controller
	recorder *MockuserGetterMockRecorder
	isgomock struct{}
}

// MockuserGetterMockRecorder is the mock recorder for MockuserGetter.
type MockuserGetterMockRecorder struct {
	mock *MockuserGetter
}

// NewMockuserGetter creates a new mock instance.
func NewMockuserGetter(ctrl *gomock.Controller) *MockuserGetter {
	mock := &MockuserGetter{ctrl: ctrl}
	mock.recorder = &MockuserGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserGetter) EXPECT() *MockuserGetterMockRecorder {
	return m.recorder
}

// GetUsers mocks base method.
func (m *MockuserGetter) GetUsers(ctx context.Context) (types.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].(types.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockuserGetterMockRecorder) GetUsers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockuserGetter)(nil).GetUsers), ctx)
}

// MockuserCacher is a mock of userCacher interface.
type MockuserCacher struct {
	ctrl     *gomock.Controller
	recorder *MockuserCacherMockRecorder
	isgomock struct{}
}

// MockuserCacherMockRecorder is the mock recorder for MockuserCacher.
type MockuserCacherMockRecorder struct {
	mock *MockuserCacher
}

// NewMockuserCacher creates a new mock instance.
func NewMockuserCacher(ctrl *gomock.Controller) *MockuserCacher {
	mock := &MockuserCacher{ctrl: ctrl}
	mock.recorder = &MockuserCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserCacher) EXPECT() *MockuserCacherMockRecorder {
	return m.recorder
}

// CacheUsers mocks base method.
func (m *MockuserCacher) CacheUsers(teamID string, users []slack.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CacheUsers", teamID, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// CacheUsers indicates an expected call of CacheUsers.
func (mr *MockuserCacherMockRecorder) CacheUsers(teamID, users any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheUsers", reflect.TypeOf((*MockuserCacher)(nil).CacheUsers), teamID, users)
}

// LoadUsers mocks base method.
func (m *MockuserCacher) LoadUsers(teamID string, retention time.Duration) ([]slack.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadUsers", teamID, retention)
	ret0, _ := ret[0].([]slack.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadUsers indicates an expected call of LoadUsers.
func (mr *MockuserCacherMockRecorder) LoadUsers(teamID, retention any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadUsers", reflect.TypeOf((*MockuserCacher)(nil).LoadUsers), teamID, retention)
}
