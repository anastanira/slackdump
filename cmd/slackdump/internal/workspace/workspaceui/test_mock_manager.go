// Code generated by MockGen. DO NOT EDIT.
// Source: api.go
//
// Generated by this command:
//
//	mockgen -package workspaceui -destination=test_mock_manager.go -source api.go manager
//

// Package workspaceui is a generated GoMock package.
package workspaceui

import (
	reflect "reflect"

	auth "github.com/rusq/slackdump/v3/auth"
	gomock "go.uber.org/mock/gomock"
)

// Mockmanager is a mock of manager interface.
type Mockmanager struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerMockRecorder
	isgomock struct{}
}

// MockmanagerMockRecorder is the mock recorder for Mockmanager.
type MockmanagerMockRecorder struct {
	mock *Mockmanager
}

// NewMockmanager creates a new mock instance.
func NewMockmanager(ctrl *gomock.Controller) *Mockmanager {
	mock := &Mockmanager{ctrl: ctrl}
	mock.recorder = &MockmanagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmanager) EXPECT() *MockmanagerMockRecorder {
	return m.recorder
}

// SaveProvider mocks base method.
func (m *Mockmanager) SaveProvider(workspace string, p auth.Provider) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProvider", workspace, p)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProvider indicates an expected call of SaveProvider.
func (mr *MockmanagerMockRecorder) SaveProvider(workspace, p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProvider", reflect.TypeOf((*Mockmanager)(nil).SaveProvider), workspace, p)
}

// Select mocks base method.
func (m *Mockmanager) Select(workspace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", workspace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockmanagerMockRecorder) Select(workspace any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*Mockmanager)(nil).Select), workspace)
}
