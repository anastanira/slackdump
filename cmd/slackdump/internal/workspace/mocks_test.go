// Code generated by MockGen. DO NOT EDIT.
// Source: workspace.go
//
// Generated by this command:
//
//	mockgen -destination=mocks_test.go -package=workspace -source=workspace.go manager
//

// Package workspace is a generated GoMock package.
package workspace

import (
	context "context"
	os "os"
	reflect "reflect"

	auth "github.com/rusq/slackdump/v3/auth"
	cache "github.com/rusq/slackdump/v3/internal/cache"
	gomock "go.uber.org/mock/gomock"
)

// Mockmanager is a mock of manager interface.
type Mockmanager struct {
	ctrl     *gomock.Controller
	recorder *MockmanagerMockRecorder
	isgomock struct{}
}

// MockmanagerMockRecorder is the mock recorder for Mockmanager.
type MockmanagerMockRecorder struct {
	mock *Mockmanager
}

// NewMockmanager creates a new mock instance.
func NewMockmanager(ctrl *gomock.Controller) *Mockmanager {
	mock := &Mockmanager{ctrl: ctrl}
	mock.recorder = &MockmanagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmanager) EXPECT() *MockmanagerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *Mockmanager) Auth(ctx context.Context, name string, c cache.Credentials) (auth.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, name, c)
	ret0, _ := ret[0].(auth.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockmanagerMockRecorder) Auth(ctx, name, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*Mockmanager)(nil).Auth), ctx, name, c)
}

// Current mocks base method.
func (m *Mockmanager) Current() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Current indicates an expected call of Current.
func (mr *MockmanagerMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*Mockmanager)(nil).Current))
}

// Delete mocks base method.
func (m *Mockmanager) Delete(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockmanagerMockRecorder) Delete(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Mockmanager)(nil).Delete), name)
}

// Exists mocks base method.
func (m *Mockmanager) Exists(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockmanagerMockRecorder) Exists(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*Mockmanager)(nil).Exists), name)
}

// FileInfo mocks base method.
func (m *Mockmanager) FileInfo(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileInfo", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FileInfo indicates an expected call of FileInfo.
func (mr *MockmanagerMockRecorder) FileInfo(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileInfo", reflect.TypeOf((*Mockmanager)(nil).FileInfo), name)
}

// List mocks base method.
func (m *Mockmanager) List() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockmanagerMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mockmanager)(nil).List))
}

// LoadProvider mocks base method.
func (m *Mockmanager) LoadProvider(name string) (auth.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadProvider", name)
	ret0, _ := ret[0].(auth.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadProvider indicates an expected call of LoadProvider.
func (mr *MockmanagerMockRecorder) LoadProvider(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadProvider", reflect.TypeOf((*Mockmanager)(nil).LoadProvider), name)
}

// Select mocks base method.
func (m *Mockmanager) Select(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockmanagerMockRecorder) Select(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*Mockmanager)(nil).Select), name)
}
